{"tagline":"Api para el manejo de placa arduino via web","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"###############\r\n#  API SISA   #\r\n###############\r\nApi para el manejor de placas arduino y arduino_mega\r\n\r\nEs necesario instalar pyfirmata, django, postgresql\r\n\r\n################\r\n#   Instalar   #\r\n################\r\nDescargar pyfirmata (https://github.com/tino/pyFirmata)\r\n\r\nSegún la distro que uses instalar django y postgres\r\n\r\nCrear la dase de datos en postgres pg_sisa\r\n\r\ncd /home/user/sisa\r\n\r\nmodificar ./sisa/setting.py, según los parametros de la base de datos creada\r\n\r\n    DATABASES = {\r\n\r\n        'default': {\r\n\r\n        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\r\n    \r\n            'NAME': 'pg_sisa',                      # Or path to database file if using sqlite3.\r\n        \r\n            'USER': 'user_sisa',                      # Not used with sqlite3.\r\n        \r\n            'PASSWORD': 'clave_sisa',                  # Not used with sqlite3.\r\n        \r\n            'HOST': 'localhost',                      # Set to empty string for localhost. Not used with sqlite3.\r\n        \r\n            'PORT': '5432',                      # Set to empty string for default. Not used with sqlite3.\r\n        \r\n            }\r\n    \r\n        }\r\n\r\n################\r\n#Configuración #\r\n################\r\n\r\nCreamos la estructura de la base de datos\r\n\r\n    python manage.py syncdb\r\n\r\nSe crea la estructura y llena tablas con ejemplos, para no llenar las tablas eliminamos la carpeta ./api/fixtures\r\n\r\nLas tablas que se crean son:\r\n\r\nplaca: que nos permite definir el tipo de arduino a configurar, sus puertos digitales, analogos y pwm\r\n\r\npuerto: en que puerto del sistema está configurada, ejemplo linux /dev/ttyACM0\r\n\r\ntablero: tablero con el cual trabajaremos es decir que tipo de arduino y en el puerto que esta conectada\r\n\r\npin_placa: configuración de cada pin de un tablero, modo (entrada o salida), tipo (digital, análogo).\r\n\r\nCombinacion_pin: Esta tabla define tipos de combinaciones que se tiene de ser el caso, que pin de salida controla un pin de entrada o pin de movimiento, y el tipo de manejo para el pin de movimiento en caso de configurarlo. ejm\r\npinentrada2, queremos que al enviar un pulso electrico a 1, envíe una señal a pinsalida8 y cambie de estado, al igual que pinmovimiento, de acuerdo al modo que esté configurado. off_auto, es decir mientras pinmovimiento no reciba señal, el pin8, o en el que esté configurado cambiara de estado a 0 (apaga), en caso de configurarlo como on_auto, cuando pinmovimiento reciva una señal, pin8 o el que este configurado cambiará de estado a 1 (enciende).\r\n\r\n\r\nArrancar el servidor\r\n\r\n    python manage.py runserver\r\n\r\n\r\n################\r\n#     USO      #\r\n################\r\n\r\nPara usar el api, podremos enviar parámetros como recibir el estado de uno o todos los pines, para ello todos devuelve un json de la forma {\"tablero\":{\"pin\":\"valor\"}} ó si genera error {\"error\":\"mesaje\"}\r\n\r\nCambiar estado a un pin, solo funciona con tipo=d (pin digital)\r\n\r\nhttp://localhost:8000/api/?pin=8&accion=1&tipo=d&tablero=1\r\n\r\nDevuelve\r\n\r\n    {\"1\":{\"8\":false}}\r\n\r\nLeer estado de un pin, cambiando tipo=a (análogo), podremos obtener la lectura de un pin análogo\r\n\r\nhttp://localhost:8000/api/?pin=8&accion=0&tipo=d&tablero=1\r\n\r\nDevuelve\r\n    {\"1\":{\"8\":false}} En caso de ser digital\r\n\r\n    {\"1\":{\"0\":0.035}} En caso de ser análogo\r\n\r\nDonde:\r\n\r\npin: numero pin a leer o cambiar estado\r\n\r\nacción: 1 = cambia estado a pin 0 = lee estado de pin\r\n\r\ntipo: d = digital a = análogo\r\n\r\ntablero: número de tablero configurado en db\r\n\r\nsi tipo = a, acción solo puede ser = 0.\r\n\r\n\r\nCambiar estado a 0 (apaga) todos los pins digitales de salida sin importar el tablero\r\n\r\nhttp://localhost:8000/api/?estado=0 \r\n\r\nDevuelve\r\n\r\n    {\"1\":{\"8\":false,\"9\":false},\"3\":{\"8\":false, \"10\":false}}\r\n\r\nLeer estado todos pins, separandolo por tablero en un diccionario\r\n\r\nhttp://localhsot:8000/api/?estad=1&modo=1&tipo=d\r\n\r\n    {\"1\":{\"8\":true,\"10\":false}} En caso de pins digitales\r\n\r\n    {\"1\":{\"0\":0.0085,\"1\":0.0434}} En caso de pins análogos\r\n\r\nDonde:\r\n\r\nestado: 0 = cambia a 0 todos los pines de salida digitales, 1 = lee estado de pines según combinación\r\n\r\nmodo: i = input o = output\r\n\r\ntipo: d = digital a = análogo\r\n\r\nsi tipo = d, modo solo podrá ser = 1\r\n","name":"Sisa API arduino","google":""}